#! /usr/bin/env python3
import sys, re, os, os.path
import subprocess
from shutil import copy2

define = r'\nObject.defineProperty\(exports, "__esModule", \{\n\s*value: true\n\s*\}\);\n'
export_import = r'Object.defineProperty\(exports, \'(\w+)\', \{\n\s*enumerable: true,\n\s*get: function get\(\) \{\n\s*return (.*).\1;\n\s*\}\n\s*\}\);'
require = r'\nvar (\w+) = require\(\'(.+)\'\);\n'
export = r'var (\w+) = exports.\1 ='

def qmlify(filename, build_dir):
    basename = os.path.basename(filename)
    out_filename = os.path.join(build_dir, basename)

    if os.path.getmtime(out_filename) >= os.path.getmtime(filename):
        return

    print(' - ' + filename)

    if not filename.endswith('.js'):
        copy2(filename, build_dir)
        return

    subprocess.run(['babel', filename, '-o', out_filename], check=True, stdout=subprocess.PIPE,
                   stderr=subprocess.STDOUT, stdin=subprocess.PIPE)

    with open(out_filename) as f:
        text = f.read()

    header = '.pragma library\n'

    # Convert npm-style requires to QML imports

    for (name, filename) in re.findall(require, text):
        if filename.startswith('./'):
            if '.js' not in filename:
                filename += '.js'
            header += '.import "{}" as QML{}\n'.format(filename, name)
        else:
            header += '.import {} as QML{}\n'.format(filename, name)

    header += '\n'

    for (name, filename) in re.findall(require, text):
    	header += 'var {} = QML{}\n'.format(name, name)

    header += '\n'

    text = re.sub(require, '', text)

    # Remove the esModule export
    text = re.sub(define, '', text)

    # QML doesn't use the exports property; all top-levels are exported
    text = re.sub(r'\n(exports.\w+\s*=\s*)+ undefined;\n', '\n', text)
    text = re.sub(r'exports.\w+ = \w+;\n', '', text)
    text = re.sub(export, r'var \1 =', text)
    text = re.sub(export_import, r'var \1 = \2.\1;', text)

    text = header + text

    with open(out_filename, 'w') as file:
        file.write(text)


def qmlify_dir(path, build_dir):
    for dirname, subdirs, files in os.walk(path):
        if os.path.samefile(build_dir, dirname):
            continue
        for filename in files:
            qmlify(os.path.join(dirname, filename), build_dir)


if __name__ == '__main__':
    build_dir = sys.argv[-1]
    if not os.path.exists(build_dir):
        os.makedirs(build_dir)
    for filename in sys.argv[1:-1]:
        if os.path.isdir(filename):
            qmlify_dir(filename, build_dir)
        else:
            qmlify(filename, build_dir)
