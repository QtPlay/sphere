#! /usr/bin/env python3
import re
import os.path
import sys
import subprocess

qml_imports = []
base_dir = os.path.abspath(os.path.dirname(__file__))
temp_dir = os.path.abspath(os.path.join(base_dir, 'temp'))
checked_files = []

def find_imports(text):
    imports = []

    for type, variables, module in re.findall(r'(import|export) \{(.+)\} from \'(.+)\'', text):
        variables = variables.split(r'\s*,\s*')
        imports.append((type, 'specific', variables, module))
    for type, name, module in re.findall(r'(import|export) (\w+) from \'(.+)\'', text):
        imports.append((type, 'named', name, module))
    for type, module in re.findall(r'(import|export) \'(.+)\'', text):
        imports.append((type, 'affects', None, module))

    return imports

def pre_qmlify(filename):
    if filename in checked_files:
        return
    else:
        checked_files.append(filename)

    dirname = os.path.dirname(filename)
    basename = os.path.basename(filename)
    out_filename = os.path.join(temp_dir, basename)

    with open(filename) as f:
        text = f.read()

    imports = find_imports(text)

    for type, format, values, path in imports:
        if path.startswith('./'):
            pre_qmlify(os.path.abspath(os.path.join(dirname, path + '.js')))
        if type == 'import' and re.fullmatch(r'.*\s+\d.\d', path):
            qml_imports.append((format, values, path))
            text = re.sub(r'import .* \'{}\'\n'.format(path), '', text)

    with open(out_filename, 'w') as f:
        f.write(text)


def post_qmlify(filename):
    with open(filename) as f:
        text = f.read()

    header = '.pragma library\n'

    # For any QML imports,
    for format, values, path in qml_imports:
        if format == 'named':
            header += '.import {path} as {values}\n'.format(path=path, values=values)
        else:
            raise Exception('Unable to handle import format: ' + format)

    text = header + '\n' + text

    with open(filename, 'w') as f:
        f.write(text)

src_filename = os.path.abspath(sys.argv[1])
dest_filename = os.path.abspath(sys.argv[2])
src_basename = os.path.basename(src_filename)
temp_filename = os.path.join(temp_dir, src_basename)

pre_qmlify(src_filename)
subprocess.run('browserify {temp} -t babelify -o {dest}'.format(temp=temp_filename, dest=dest_filename),
               shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
               stdin=subprocess.PIPE)
post_qmlify(dest_filename)
